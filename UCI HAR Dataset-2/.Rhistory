library(swirl)
swirl()
submit()
boring_function("My first function")
boring_function("My first function!")
boring_function
submit()
submit()
submit()
mean()
View(my_mean)
View(my_mean)
View(mean)
submit()
my_mean(c(4, 5, 10))
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x) x[1], c(8, 4, 0))
evaluate(function(x) x[-1], c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram(Diego)
telegram("Diego")
submit()
submit()
mad_libs(Madrid, buenos, días)
mad_libs("Madrid", "buenos", "días")
submit()
'I' %p% 'love' %p% 'R'
submit()
submit
'I' %p% 'love' %p% 'R'
'I' %p% 'love' %p% 'R!'
library("xlsx")
install.packages(keras)
install.packages("keras")
library("keras")
library("tensorflow")
install_keras()
n
library("keras")
install_keras()
Install.packages("RMySQL")
install.packages("RMySQL")
library(swirl)
swirl()
cran
?select
select(cran, ip_id,package, country)
5:20
select(cran, r_arch:country)
select(cran, desc(r_arch:country)
)
select(cran, desc(r_arch:country))
select(cran, r_arch:country)
select(cran, desc(r_arch:country_r_arch)
)
select(cran, r_arch:country_r_arch)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
5:20
-(5:20)
select(cran, -X)
select(cran, -(X:size)
)
filter(cran, package == "swirl")
filter(cran, r_version =="3.1.1", country == "US ")
filter(cran, r_version =="3.1.1", country == "US")
?Comparison
filter(cran, country == "IN", version <= "3.0.2")
filter(cran, version <= "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 100))
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(R.version))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id:size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_byter = mean(size))
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
pack_sum <- summarize(by_package, count = n(),unique = n_distinct(ip_id), countries = n_distinct(country) , avg_bytes = mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filer(pack_sum, count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
arrange(top_counts, counts)
arrange(top_counts, count)
arrange(top_counts, desc(count)
)
top_counts_sorted <- arrange(top_counts, desc(count))
top_counts_sorted
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
cran
select(cran, ip_id, package, country)
submit()
submit()
submit)
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
gather(students, sex_class, value, -grade)
gather(students, sex_class, count, -grade)
res <- gather(students, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(data = res, col = sex_class, into = c("sex", "class"))
submit)
submit()
students3
?gather
submit()
submit
submit()
submit()
submit()
?spread()
?spread
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(readr)
parse_number("class5")
submit
submit()
submit()
?mutate
submit()
parse_number(class)
class(class)
str(students3)
submit)
submit()
submit()
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- passed %>% mutate(status = "passed")
passed <- passed %>% mutate(status = "failed")
passed <- failed %>% mutate(status = "failed")
failed <- failed %>% mutate(status = "failed")
bind_rows(passed, failed)
sat
?select
submit()
submit()
submit()
?mutate
submit()
submit()
submit()
setwd("/Users/diego/Desktop/Data Science/R/Coursera/Cleaning and Managing Data/Getting-and-Cleaning-Data-Course-Project/UCI HAR Dataset-2")
#reading features and activity data
features <- read.table("features.txt")
activities <- read.table("activity_labels.txt")
#reading train data
train <- read.table("./train/X_train.txt") #features data
colnames(train) <- features$V2  #descriptive column names for data (STEP 4)
y_train <- read.table("./train/y_train.txt") #activity labels
train$activity <- y_train$V1
subject_train <- read.table("./train/subject_train.txt") #subjects
train$subject <- factor(subject_train$V1)
features$V2
rm(list = ls())
getwd()
features <- read.table("features.txt")
activities <- read.table("activity_labels.txt")
train <- read.table("./train/X_train.txt")
train
colnames(train) <- features$V2
train
y_train <- read.table("./train/y_train.txt")
y_train
train$activity <- y_train$V1
train
str(train)
subject_train <- read.table("./train/subject_train.txt")
train$subject <- factor(subject_train$V1)
train$subject
# 1. Reading Features and Activity Data
features <- read.table("features.txt")
activities <- read.table("activity_labels.txt")
# 2. Reading Train Data
train <- read.table("./train/X_train.txt") #Features data
colnames(train) <- features$V2  #descriptive column names for data (STEP 4)
y_train <- read.table("./train/y_train.txt") #activity labels
train$activity <- y_train$V1
subject_train <- read.table("./train/subject_train.txt") #subjects
train$subject <- factor(subject_train$V1)
#3. Reading Test Data
test <- read.table("./test/X_test.txt")
colnames(test) <- features$V2
y_test <- read.table("./test/y_test.txt")
test$activity <- y_test$V1
subject_test <- read.table(".test/subject_test.txt")
test$subject <- factor(subject_test$V1)
#4. Merge Train and Test Sets (STEP 1)
dataset <- rbind(test, train)
# 1. Reading Features and Activity Data
features <- read.table("features.txt")
activities <- read.table("activity_labels.txt")
# 2. Reading Train Data
train <- read.table("./train/X_train.txt") #Features data
colnames(train) <- features$V2  #descriptive column names for data (STEP 4)
y_train <- read.table("./train/y_train.txt") #activity labels
train$activity <- y_train$V1
subject_train <- read.table("./train/subject_train.txt") #subjects
train$subject <- factor(subject_train$V1)
#3. Reading Test Data
test <- read.table("./test/X_test.txt")
colnames(test) <- features$V2
y_test <- read.table("./test/y_test.txt")
test$activity <- y_test$V1
subject_test <- read.table("./test/subject_test.txt")
test$subject <- factor(subject_test$V1)
#4. Merge Train and Test Sets (STEP 1)
dataset <- rbind(test, train)
str(dataset)
?dcast
library(reshape)
library(reshape2)
install.packages(reshape2)
library("reshape2")
install.packages("reshape2")
library("reshape2")
?dcast
#5. Filter Column Names (STEP 2)
column.names <- colnames(dataset)
# Get only columns for standard deviation and mean values, also saves activity and subject values
column.names.filtered <- grep("std\\(\\)|mean\\(\\)|activity|subject", column.names, value=TRUE)
dataset.filtered <- dataset[, column.names.filtered]
str(dataset.filtered)
column.names.filtered
#adding descriptive values for activity labels (STEP 3)
dataset.filtered$activitylabel <- factor(dataset.filtered$activity, labels= c("WALKING", "WALKING_UPSTAIRS", "WALKING_DOWNSTAIRS", "SITTING", "STANDING", "LAYING"))
dataset.filtered
# 1. Reading Features and Activity Data
features <- read.table("features.txt")
activities <- read.table("activity_labels.txt")
# 2. Reading Train Data
train <- read.table("./train/X_train.txt") #Features data
colnames(train) <- features$V2  #descriptive column names for data (STEP 4)
y_train <- read.table("./train/y_train.txt") #activity labels
train$activity <- y_train$V1
subject_train <- read.table("./train/subject_train.txt") #subjects
train$subject <- factor(subject_train$V1)
# 3. Reading Test Data
test <- read.table("./test/X_test.txt")
colnames(test) <- features$V2
y_test <- read.table("./test/y_test.txt")
test$activity <- y_test$V1
subject_test <- read.table("./test/subject_test.txt")
test$subject <- factor(subject_test$V1)
# 4. Merge Train and Test Sets (STEP 1)
dataset <- rbind(test, train)
# 5. Filter Column Names (STEP 2)
column.names <- colnames(dataset)
# Get only columns for standard deviation and mean values, also saves activity and subject values
column.names.filtered <- grep("std\\(\\)|mean\\(\\)|activity|subject", column.names, value=TRUE)
dataset.filtered <- dataset[, column.names.filtered]
# 6. Adding descriptive values for activity labels (STEP 3)
dataset.filtered$activitylabel <- factor(dataset.filtered$activity, labels = c("WALKING", "WALKING_UPSTAIRS", "WALKING_DOWNSTAIRS", "SITTING", "STANDING", "LAYING"))
# 7. Creating a tidy dataset with mean values for each subject and activity
features.colnames = grep("std\\(\\)|mean\\(\\)", column.names, value=TRUE)
dataset.melt <-melt(dataset.filtered, id = c('activitylabel', 'subject'), measure.vars = features.colnames)
dataset.tidy <- dcast(dataset.melt, activitylabel + subject ~ variable, mean)
